I"‘.<div class="titleslide">
<h3 class="title-header" style="top: 20%;"> 
  BSc Umweltingenieurwesen<br /> Angewandte Geoinformatik | HS21
</h3>

<h1 class="title-header" style="top: 40%;">Coding in GIS II</h1>

<div class="title-header title-bottom" style="width: 20%">
  &lt;img src="img/zhaw_rgb_byline_d.png" width = 100%&gt; 
</div>
<div class="title-header title-bottom" style="left: 40%; width: 47%;">
  Nils Ratnaweera<br />
  Forschungsgruppe Geoinformatik<br />
  <br />
  Institut f√ºr Umwelt und Nat√ºrliche Ressourcen	<br />
  ZHAW Z√ºrcher Hochschule f√ºr Angewandte Wissenschaften<br />
  Gr√ºental, Postfach, CH-8820 W√§denswil<br />
  <br />
  rata@zhaw.ch
</div>
---
name: zeitplan 

# Zeitplan

.pure-table.pure-table-striped.smaller-font[
| Uhrzeit       	| Dauer   	| Thema                                               	|
|---------------	|---------	|-----------------------------------------------------	|
| 13.00 ‚Äì 13.30 	| 30      	| Einf√ºhrung Coding in GIS                            	|
| 13.30 ‚Äì 13.45 	| 15      	| Einf√ºhrung in die heutigen √úbungen                  	|
| 13.45 ‚Äì 13.50 	| 5       	| Pause                                               	|
| 13.50 ‚Äì 14.00 	| 10      	| Demo                                                	|
| 14.00 ‚Äì 14.35 	| 35      	| L√∂sen Aufgabe 1 (*Primitive Datentypen*)            	|
| 14.35 ‚Äì 14.50 	| 15      	| Pause                                               	|
| 14.50 ‚Äì 15.00 	| 10      	| Besprechung Aufgabe 1 / L√∂sungen aufschalten        	|
| 15.00 ‚Äì 15.35 	| 35      	| L√∂sen Aufgabe 2 (*Listen*)                          	|
| 15.35 ‚Äì 15.50 	| 15      	| Pause                                               	|
| 15.50 ‚Äì 16.00 	| 10      	| Besprechung Aufgabe 2 / L√∂sungen aufschalten        	|
| 16.00 ‚Äì 16.25 	| 25      	| L√∂sen Aufgabe 3 (*Dictionaries*)                    	|
| 16.25 ‚Äì 16.35 	| 10      	| Zusammenfassung + Abschluss / L√∂sungen aufschalten  	|
| Zuhause       	| 30 - 45 	| L√∂sen bis und mit Aufgabe 4 (*Tabellarische Daten*) 	|
]

---
# Lernziele

* Ihr wisst was Python Erweiterungen / Module sind und wie man sie installiert
* Ihr kennt das Konzept von Conda Environments
* Ihr wisst was eine *Working Directory* ist und k√∂nnt diese abfragen und setzen

---
name: themen
layout: true

# Themen

<ul>
  <li id="first">Python Erweiterungen / Module</li>
  <li id="second">Virtual Environments</li>
  <li id="third">Conda</li>
  <li id="fourth">Condamit ArcGIS</li>
  <li id="fifth">Leistungsnachweis</li>
</ul>

---
template: themen
class: first

---
layout: true

# Python Erweiterungen / Module

---

![](img/virtual-env.png)


---
template: themen
class: second

---
layout: true
# Virtual Environment

---

ohne Virtual Environments:

.center[![](img/virtual-env-2.png)]

.center[Alles wird an einem zentralen Ort installiert]

---

mit Virtual Environments

.center[![](img/virtual-env3.png)]

.center[unabh√§ngige, wiederverwenbare Umgebungen]

???

davon gibt es in Python 3 verschiedene Implementationen:‚Äã
- "Virtualenv"
- "pipenv"
- "Conda Environment"


---
template: themen
class: third

---
layout: false
# Conda



- Was kann *Conda*
  * Erstellen und verwalten von *Virtual Environments*
  * Installation von Erweiterungen (*Python Modules*)

- Wie nutzt man *Conda*?
  * ~~Schritt 1: Software herunterladen und installieren~~
  * Schritt 2: Systemvariable setzen (falls n√∂tig)
  * Schritt 3: eine *Virtual Environment* erstellen
  * Schritt 4: die *Virtual Environment* aktivieren
  * Schritt 5: Modul installieren

---

## Schritt 1: Software herunterladen und installieren

_conda_ wird in zwei verschiedenen Varianten angeboten:

* *Miniconda*:
  * nur das Programm _conda_
  * ohne grafisches User Interface
  * klein (50 ‚Äì 100mb)
  * **wird mit ArcGIS Pro mitgeliefert**
* *Anaconda*:
  * das Programm _conda_
  * inkl. h√§ufig genutzt Modules
  * inkl. einem Grafisches User Interface
  * gross (300 ‚Äì 500 MB)

---
layout: true

## Schritt 2: Systemvariable setzen (falls n√∂tig)

---

* Conda wird von der **Konsole** bedient
* Daf√ºr muss die Konsole wissen, wo das Programm installiert ist
* Dies wird folgendermassen √ºberpr√ºft:
--

1. Konsole starten (Widowstaste+cmd)
--

2. Folgendes eingeben: `conda --version`
--

3. Versionsnummer ‚ò∫ / Error ‚òπ

---

- Wird ein Programm in der Konsole aufgerufen, wird nach diesem Programm in verschiedenen Ordnern gesucht
- Welche Ordner dies sind, wird in den Umgebungvariablen festgehalten
- Wir m√ºssen den `conda`-Pfad also ausfindig machen und in den Umgebungsvariabeln festhalten

---

- Wenn ihr auf Windows arbeitet und ArcGIS installiert habt, ist conda vermutlich hier installiert:
- `C:\Program Files\ArcGIS\Pro\bin\Python\Scripts`

---

&lt;img src = "img/AGI_HS19_06_Coding_in_GIS_II23.png" width = 75%&gt;

---

&lt;img src = "img/AGI_HS19_06_Coding_in_GIS_II24.png" width = 75%&gt;

---

<img src="img/AGI_HS19_06_Coding_in_GIS_II25.png" />

---


- Nun sollte *conda* betriebsbereit sein
- Konsole starten (cmd):

```ruby
conda --version
conda 4.3.27      # &lt; kann auch variieren
```


- Wenn dies Funktioniert, k√∂nnen wir eine erste *conda environment* erstellen

---
layout: true

## Schritt 3:  Conda environment erstellen

---


```ruby
conda create --name codingingis
```

---
```ruby
`conda` create --name codingingis
```
Ruft das Programm *conda* auf

---


```ruby
conda `create` --name codingingis
```
Ruft den Befehl *create* auscondaauf

Der *create* Befehl erstellt eben diese neue Environment in einem Standartverzeichnis

---

```ruby
conda create `--name` codingingis
```

K√ºndigt an, dass gleich der Name der neuen Umgebung definiert wird

---

```ruby
conda create --name `codingingis`
```

Bestimmt, das der Name der neuen Umgebung *codingingis* lauten soll

---

&lt;img src = "img/AGI_HS19_06_Coding_in_GIS_II26.png" width = 80%&gt;

- Speicherort: `C:\Users\rata\AppData\Local\ESRI\conda`
- Mit `y` best√§tigen

---

&lt;img src = "img/AGI_HS19_06_Coding_in_GIS_II27.png" width = 100%&gt;

---
layout: true

## Schritt 4: Environment aktivieren

---

```ruby
activate codingingis
```
- Aktiviert die Environment mit dem Namen `codingingis`

---

&lt;img src = "img/AGI_HS19_06_Coding_in_GIS_II28.png" width = 100%&gt;

---
layout: true
## Schritt 5: Modul installieren


---
&lt;img src = "img/AGI_HS19_06_Coding_in_GIS_II29.png" width = 100%&gt;

---

```ruby
conda install -c conda-forge pandas
```

- Befehl um *pandas* zu installieren
- Findet man √ºber eine kurze websuche

---


```ruby
`conda` install -c conda-forge pandas
```

- ruft das Programm *conda* auf

---


```ruby
conda `install` -c conda-forge pandas
```

- ruft den Befehl *install* in Condaauf

---


```ruby
conda install `-c` conda-forge pandas
```

- gibt an, dass jetzt gleich der *Channel* (i.e. das *Repository*) angegeben wird

---

```ruby
conda install -c `conda-forge` pandas
```

- ist der Name des *channels*

---

```ruby
conda install -c conda-forge `pandas`
```

- der Name des Moduls

---

&lt;img src = "img/AGI_HS19_06_Coding_in_GIS_II30.png" width = 100%&gt;

---

&lt;img src = "img/AGI_HS19_06_Coding_in_GIS_II31.png" width = 100%&gt;

---

F√ºr Coding in GIS I ‚Äì III brauchen wir folgende Module:
* `jupyterlab`
* `pandas`
* `matplotlib`
* `geopandas`
* `descartes`

Immer nach dem gleichen Syntax:

```ruby
conda install -c conda-forge `pandas` # &lt; Modul-Name jeweils ersetzen
```

Sobald jupyterlab installiert ist, k√∂nnt ihr die Anwendung mit folgendem Befehl in die Konsole starten:

```ruby
jupyter lab
```

---

&lt;img src = "img/AGI_HS19_06_Coding_in_GIS_II32.png" width = 100%&gt;

---
layout: false

## Modul Importieren

&lt;img src = "img/AGI_HS19_06_Coding_in_GIS_II33.png" width = 100%&gt;

zB  `import  pandas`

---
## Working Directory

&lt;img src = "img/AGI_HS19_06_Coding_in_GIS_II34.png" width = 100%&gt;


- wo die Pythonscripts / Notebooks sind
- Ist v.a. beim einlesen / ausgeben von Dateien wichtig
- kann mit `os.getcwd()` ermittelt werden


---
## Warum verbringen wir so viel Zeit mit `conda`?

- Der sichere Umgang mit Conda ist eine gute Basis f√ºr eine harmonische Python-Beziehung
- Conda wird in vielen Python Kursen / Tutorials vorausgesetzt und unzureichend erkl√§rt
- Mit conda k√∂nnen wir zwei Welten miteinander Verbinden

--

<img src="img/AGI_HS20_02_Coding_in_GIS_Ia66.png" class="pull-left" />
<img src="img/AGI_HS19_06_Coding_in_GIS_II38.png" class="pull-right" />


---
template: themen
class: fourth

---
layout: true

# Conda mit ArcGIS

---

&lt;img src = "img/AGI_HS19_06_Coding_in_GIS_II42.png" width = 100%&gt;

---

&lt;img src = "img/AGI_HS19_06_Coding_in_GIS_II43.png" width = 50%&gt;

```python
arcpy.analysis.SummarizeWithin("Wald_NichtWald", 
  "Tick_Original",
  r"C:\unsicherheit.gdb\summary", 
  "KEEP_ALL", 
  None, 
  "ADD_SHAPE_SUM", 
  '', 
  None, 
  "NO_MIN_MAJ", 
  "NO_PERCENT", 
  None
)
```
---

&lt;img src = "img/AGI_HS19_06_Coding_in_GIS_II44.png" width = 100%&gt;

---


![](img/AGI_HS19_06_Coding_in_GIS_II45.png)

---


&lt;img src = "img/AGI_HS19_06_Coding_in_GIS_II46.png" width = 70%&gt;
---

![](img/AGI_HS19_06_Coding_in_GIS_II47.png)

---

![](img/AGI_HS19_06_Coding_in_GIS_II48.png)

---


![](img/AGI_HS19_06_Coding_in_GIS_II49.png)

---

![](img/AGI_HS19_06_Coding_in_GIS_II50.png)

---

![](img/AGI_HS19_06_Coding_in_GIS_II51.png)

---

![](img/AGI_HS19_06_Coding_in_GIS_II52.png)




![](img/AGI_HS19_06_Coding_in_GIS_II53.png)

---

![](img/AGI_HS19_06_Coding_in_GIS_II54.png)

---

![](img/AGI_HS19_06_Coding_in_GIS_II55.png)

---

![](img/AGI_HS19_06_Coding_in_GIS_II56.png)

---

![](img/AGI_HS19_06_Coding_in_GIS_II57.png)


---


![](img/AGI_HS19_06_Coding_in_GIS_II58.png)

---

![](img/AGI_HS19_06_Coding_in_GIS_II59.png)

---
template: themen
class: fifth

---
layout: true

# Leistungsnachweis

Gemeinsam kommende Woche (Coding in GIS III):

- Monte Carlo Simulation mit den Zeckenstichdaten
- Systematik gleich wie in *Datenqualit√§t und Unsicherheit*
- Neu: Alles in Python (auch die Erstellung der Simulierten Daten)


![](img/process.png)

---

Eure Leistung: 

- Erstellen eines sauber kommentierten Reports
- In JupyterLabs mit JupyterNotebook (Python und Markdown)
- Experimentieren mit verschiedenen Radien
- Visualisierung der Daten

<img src="img/AGI_HS19_06_Coding_in_GIS_II65.png" style="width: 75%" />

---
template: zeitplan

---
layout: true

# Keep your code tidy!

---

```python
import padnas as pd‚Äã

‚Äãpd.read_csv("zeckenstiche.csv")‚Äã

import pandas as pd‚Äã

os.getcwd()‚Äã

import os‚Äã

zeckenstiche = pd.read_csv("Zeckenstiche.csv")‚Äã

zeckenstiche = pd.read_csv("Zeckenstiche.txt")‚Äã

zeckenstiche = pd.read_csv("zeckenstiche.txt")
```

---

```python
*import padnas as pd‚Äã

‚Äãpd.read_csv("zeckenstiche.csv")‚Äã

*import pandas as pd‚Äã

os.getcwd()‚Äã

*import os‚Äã

zeckenstiche = pd.read_csv("Zeckenstiche.csv")‚Äã

zeckenstiche = pd.read_csv("Zeckenstiche.txt")‚Äã

zeckenstiche = pd.read_csv("zeckenstiche.txt")
```
???

Alle "import¬ª befehle zu beginn des scripts‚Äã

---

```python
*import padnas as pd‚Äã
*import pandas as pd‚Äã
*import os‚Äã

‚Äãpd.read_csv("zeckenstiche.csv")‚Äã


os.getcwd()‚Äã


zeckenstiche = pd.read_csv("Zeckenstiche.csv")‚Äã

zeckenstiche = pd.read_csv("Zeckenstiche.txt")‚Äã

zeckenstiche = pd.read_csv("zeckenstiche.txt")
```

---

```python
*import padnas as pd‚Äã
import pandas as pd‚Äã
import os‚Äã

‚Äãpd.read_csv("zeckenstiche.csv")‚Äã


os.getcwd()‚Äã


*zeckenstiche = pd.read_csv("Zeckenstiche.csv")‚Äã

*zeckenstiche = pd.read_csv("Zeckenstiche.txt")‚Äã

zeckenstiche = pd.read_csv("zeckenstiche.txt")
```

???

Code-Zeilen, die Nicht funktinoieren auskommentieren oder l√∂schen‚Äã

---

```python
import pandas as pd‚Äã
import os‚Äã

*pd.read_csv("zeckenstiche.csv")‚Äã

*os.getcwd()‚Äã

zeckenstiche = pd.read_csv("zeckenstiche.txt")
```

???

Die Reihenfolge der Ausf√ºhrung ber√ºcksichtigen! Ein Skript sollte von oben bis unten funktionieren‚Äã
</div>
:ET